tests:
  - "$DB > $VERSION > run":
      command: titan run -n $DB-test $DB:$VERSION
      stdout:
        contains:
          - Creating repository $DB-test
          - Running controlled container $DB-test
      env:
        get:
          - DB
          - VERSION
  - "$DB > $VERSION > commit":
      command: [titan, commit, -m, Test Commit, $DB-test]
      stdout:
        contains: Commit
      env:
        get:
          - DB
          - VERSION
        set:
          - COMMIT_GUID:
              split:
                delimiter: " "
                position: 1
  - "$DB > $VERSION > checkout":
      command: [titan, checkout, --commit, $COMMIT_GUID, $DB-test]
      wait: 5
      stdout: |-
        Stopping container $DB-test
        Checkout $COMMIT_GUID
        Starting container $DB-test
        $COMMIT_GUID checked out
      env:
        get:
          - COMMIT_GUID
          - DB
          - VERSION
  - "$DB > $VERSION > remote > add > s3":
      command: titan remote add -r s3 $URI $DB-test
      env:
        get:
          - DB
          - VERSION
          - URI
  - "$DB > $VERSION > remote > ls":
      command: titan remote ls $DB-test
      stdout:
        contains: $URI
      env:
        get:
          - DB
          - VERSION
          - URI
  - "$DB > $VERSION > remote > log > missing commit":
      command: titan remote log $DB-test
      stdout:
        excludes: Commit $COMMIT_GUID
      env:
        get:
          - DB
          - VERSION
          - COMMIT_GUID
  - "$DB > $VERSION > push":
      command: [titan, push, -r, s3, -c, $COMMIT_GUID, $DB-test]
      stdout:
        contains:
          - Pushing $COMMIT_GUID to 's3'
          - Push completed successfully
      env:
        get:
          - DB
          - VERSION
          - COMMIT_GUID
  - "$DB > $VERSION > remote > log > has commit":
      command: titan remote log $DB-test
      stdout:
        contains: Commit $COMMIT_GUID
      env:
        get:
          - DB
          - VERSION
          - COMMIT_GUID
  - "$DB > $VERSION > delete > commit":
      command: titan delete -c $COMMIT_GUID $DB-test
      stdout: $COMMIT_GUID deleted
      env:
        get:
          - DB
          - VERSION
          - COMMIT_GUID
  - "$DB > $VERSION > log > missing commit":
      command: titan log $DB-test
      stdout:
        excludes:
          - $COMMIT_GUID
      env:
        get:
          - DB
          - VERSION
          - COMMIT_GUID
  - "$DB > $VERSION > pull":
      command: [titan, pull, -c, $COMMIT_GUID, -r, s3, $DB-test]
      stdout:
        contains:
          - Pulling $COMMIT_GUID from 's3'
          - Pull completed successfully
      env:
        get:
          - DB
          - VERSION
          - COMMIT_GUID
  - "$DB > $VERSION > log > has commit":
      command: titan log $DB-test
      stdout:
        contains: commit $COMMIT_GUID
      env:
        get:
          - DB
          - VERSION
          - COMMIT_GUID
  - "$DB > $VERSION > rm":
      command: titan rm -f $DB-test
      wait: 5
      stdout:
        contains:
          - Removing repository $DB-test
          - $DB-test removed
      env:
        get:
          - DB
          - VERSION
  - "$DB > $VERSION > clone":
      command: titan clone -n $DB-test $URI
      wait: 5
      stdout:
        contains:
          - Creating repository $DB-test
          - Running controlled container $DB-test
          - Pull completed successfully
          - Starting container $DB-test
      env:
        get:
          - DB
          - VERSION
          - URI
  - "$DB > $VERSION > duplicate clone fails":
      command: titan clone -n $DB-test2 $URI
      exitValue: 1
      stdout:
        contains:
          - Removing repository $DB-test2
          - $DB-test2 removed
      env:
        get:
          - DB
          - VERSION
          - URI
  - "$DB > $VERSION > failed container removed":
      command: docker ps -a -f name=$DB-test2
      stdout:
        excludes: $DB-test2
      env:
        get:
          - DB
          - VERSION
          - URI
  - "$DB > $VERSION > log > has commit":
      command: titan log $DB-test
      stdout:
        contains: commit $COMMIT_GUID
      env:
        get:
          - DB
          - VERSION
          - COMMIT_GUID
  - "$DB > $VERSION > remove s3 assets":
      command: aws s3 rm $URI --recursive
      env:
        get:
          - DB
          - VERSION
          - URI
  - "$DB > $VERSION > rm":
      command: titan rm -f $DB-test
      wait: 5
      stdout:
        contains:
          - Removing repository $DB-test
          - $DB-test removed
      env:
        get:
          - DB
          - VERSION
after:
  clearVars: true